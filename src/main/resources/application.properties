# Padrão: mp.messaging.[outgoing|incoming].[nome-channel].[attribute]=[value]
# conectores: smallrye-mqtt, smallrye-kafka, smallrye-mqtt-server, smallrye-http, smallrye-vertx-eventbus, smallrye-amqp, smallrye-camel
# https://smallrye.io/smallrye-reactive-messaging/

#Video 24. Enviando Preços para cluster do eventbus
mp.messaging.outgoing.preco-gerado-to-cluster.connector=smallrye-kafka
mp.messaging.outgoing.preco-gerado-to-cluster.topic=my-topic-teste
mp.messaging.outgoing.preco-gerado-to-cluster.value.serializer=org.apache.kafka.common.serialization.DoubleSerializer
mp.messaging.outgoing.preco-gerado-to-cluster.bootstrap.servers=my-cluster1-kafka-bootstrap:9092

mp.messaging.incoming.preco-gerado-to-cluster.connector=smallrye-kafka
mp.messaging.incoming.preco-gerado-to-cluster.topic=my-topic-teste
mp.messaging.incoming.preco-gerado-to-cluster.bootstrap.servers=my-cluster1-kafka-bootstrap:9092
mp.messaging.incoming.preco-gerado-to-cluster.broadcast=true
mp.messaging.incoming.preco-gerado-to-cluster.value.deserializer=org.apache.kafka.common.serialization.DoubleDeserializer

#incoming do debezium
#mp.messaging.incoming.customers.broadcast=true
#mp.messaging.incoming.customers.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#mp.messaging.incoming.customers.connector=smallrye-kafka
#mp.messaging.incoming.customers.topic=dbserver1.inventory.customers

#quarkus.vertx.cluster.clustered=true
